{"/home/travis/build/npmtest/node-npmtest-csjs/test.js":"/* istanbul instrument in package npmtest_csjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-csjs/lib.npmtest_csjs.js":"/* istanbul instrument in package npmtest_csjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_csjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_csjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-csjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-csjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_csjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_csjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_csjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_csjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_csjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_csjs.__dirname + '/lib.npmtest_csjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/index.js":"'use strict';\n\nvar csjs = require('./csjs');\n\nmodule.exports = csjs();\nmodule.exports.csjs = csjs;\nmodule.exports.noScope = csjs({ noscope: true });\nmodule.exports.getCss = require('./get-css');\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/csjs.js":"'use strict';\n\nmodule.exports = require('./lib/csjs');\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/csjs.js":"'use strict';\n\nvar extractExtends = require('./css-extract-extends');\nvar composition = require('./composition');\nvar isComposition = composition.isComposition;\nvar ignoreComposition = composition.ignoreComposition;\nvar buildExports = require('./build-exports');\nvar scopify = require('./scopeify');\nvar cssKey = require('./css-key');\nvar extractExports = require('./extract-exports');\n\nmodule.exports = function csjsTemplate(opts) {\n  opts = (typeof opts === 'undefined') ? {} : opts;\n  var noscope = (typeof opts.noscope === 'undefined') ? false : opts.noscope;\n\n  return function csjsHandler(strings, values) {\n    // Fast path to prevent arguments deopt\n    var values = Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n      values[i - 1] = arguments[i];\n    }\n    var css = joiner(strings, values.map(selectorize));\n    var ignores = ignoreComposition(values);\n\n    var scope = noscope ? extractExports(css) : scopify(css, ignores);\n    var extracted = extractExtends(scope.css);\n    var localClasses = without(scope.classes, ignores);\n    var localKeyframes = without(scope.keyframes, ignores);\n    var compositions = extracted.compositions;\n\n    var exports = buildExports(localClasses, localKeyframes, compositions);\n\n    return Object.defineProperty(exports, cssKey, {\n      enumerable: false,\n      configurable: false,\n      writeable: false,\n      value: extracted.css\n    });\n  }\n}\n\n/**\n * Replaces class compositions with comma seperated class selectors\n * @param  value - the potential class composition\n * @return       - the original value or the selectorized class composition\n */\nfunction selectorize(value) {\n  return isComposition(value) ? value.selector : value;\n}\n\n/**\n * Joins template string literals and values\n * @param  {array} strings - array of strings\n * @param  {array} values  - array of values\n * @return {string}        - strings and values joined\n */\nfunction joiner(strings, values) {\n  return strings.map(function(str, i) {\n    return (i !== values.length) ? str + values[i] : str;\n  }).join('');\n}\n\n/**\n * Returns first object without keys of second\n * @param  {object} obj      - source object\n * @param  {object} unwanted - object with unwanted keys\n * @return {object}          - first object without unwanted keys\n */\nfunction without(obj, unwanted) {\n  return Object.keys(obj).reduce(function(acc, key) {\n    if (!unwanted[key]) {\n      acc[key] = obj[key];\n    }\n    return acc;\n  }, {});\n}\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/css-extract-extends.js":"'use strict';\n\nvar makeComposition = require('./composition').makeComposition;\n\nvar regex = /\\.([^\\s]+)(\\s+)(extends\\s+)(\\.[^{]+)/g;\n\nmodule.exports = function extractExtends(css) {\n  var found, matches = [];\n  while (found = regex.exec(css)) {\n    matches.unshift(found);\n  }\n\n  function extractCompositions(acc, match) {\n    var extendee = getClassName(match[1]);\n    var keyword = match[3];\n    var extended = match[4];\n\n    // remove from output css\n    var index = match.index + match[1].length + match[2].length;\n    var len = keyword.length + extended.length;\n    acc.css = acc.css.slice(0, index) + \" \" + acc.css.slice(index + len + 1);\n\n    var extendedClasses = splitter(extended);\n\n    extendedClasses.forEach(function(className) {\n      if (!acc.compositions[extendee]) {\n        acc.compositions[extendee] = {};\n      }\n      if (!acc.compositions[className]) {\n        acc.compositions[className] = {};\n      }\n      acc.compositions[extendee][className] = acc.compositions[className];\n    });\n    return acc;\n  }\n\n  return matches.reduce(extractCompositions, {\n    css: css,\n    compositions: {}\n  });\n\n};\n\nfunction splitter(match) {\n  return match.split(',').map(getClassName);\n}\n\nfunction getClassName(str) {\n  var trimmed = str.trim();\n  return trimmed[0] === '.' ? trimmed.substr(1) : trimmed;\n}\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/composition.js":"'use strict';\n\nmodule.exports = {\n  makeComposition: makeComposition,\n  isComposition: isComposition,\n  ignoreComposition: ignoreComposition\n};\n\n/**\n * Returns an immutable composition object containing the given class names\n * @param  {array} classNames - The input array of class names\n * @return {Composition}      - An immutable object that holds multiple\n *                              representations of the class composition\n */\nfunction makeComposition(classNames, unscoped, isAnimation) {\n  var classString = classNames.join(' ');\n  return Object.create(Composition.prototype, {\n    classNames: { // the original array of class names\n      value: Object.freeze(classNames),\n      configurable: false,\n      writable: false,\n      enumerable: true\n    },\n    unscoped: { // the original array of class names\n      value: Object.freeze(unscoped),\n      configurable: false,\n      writable: false,\n      enumerable: true\n    },\n    className: { // space-separated class string for use in HTML\n      value: classString,\n      configurable: false,\n      writable: false,\n      enumerable: true\n    },\n    selector: { // comma-separated, period-prefixed string for use in CSS\n      value: classNames.map(function(name) {\n        return isAnimation ? name : '.' + name;\n      }).join(', '),\n      configurable: false,\n      writable: false,\n      enumerable: true\n    },\n    toString: { // toString() method, returns class string for use in HTML\n      value: function() {\n        return classString;\n      },\n      configurable: false,\n      writeable: false,\n      enumerable: false\n    }\n  });\n}\n\n/**\n * Returns whether the input value is a Composition\n * @param value      - value to check\n * @return {boolean} - whether value is a Composition or not\n */\nfunction isComposition(value) {\n  return value instanceof Composition;\n}\n\nfunction ignoreComposition(values) {\n  return values.reduce(function(acc, val) {\n    if (isComposition(val)) {\n      val.classNames.forEach(function(name, i) {\n        acc[name] = val.unscoped[i];\n      });\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * Private constructor for use in `instanceof` checks\n */\nfunction Composition() {}\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/build-exports.js":"'use strict';\n\nvar makeComposition = require('./composition').makeComposition;\n\nmodule.exports = function createExports(classes, keyframes, compositions) {\n  var keyframesObj = Object.keys(keyframes).reduce(function(acc, key) {\n    var val = keyframes[key];\n    acc[val] = makeComposition([key], [val], true);\n    return acc;\n  }, {});\n\n  var exports = Object.keys(classes).reduce(function(acc, key) {\n    var val = classes[key];\n    var composition = compositions[key];\n    var extended = composition ? getClassChain(composition) : [];\n    var allClasses = [key].concat(extended);\n    var unscoped = allClasses.map(function(name) {\n      return classes[name] ? classes[name] : name;\n    });\n    acc[val] = makeComposition(allClasses, unscoped);\n    return acc;\n  }, keyframesObj);\n\n  return exports;\n}\n\nfunction getClassChain(obj) {\n  var visited = {}, acc = [];\n\n  function traverse(obj) {\n    return Object.keys(obj).forEach(function(key) {\n      if (!visited[key]) {\n        visited[key] = true;\n        acc.push(key);\n        traverse(obj[key]);\n      }\n    });\n  }\n\n  traverse(obj);\n  return acc;\n}\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/scopeify.js":"'use strict';\n\nvar fileScoper = require('./scoped-name');\nvar replaceAnimations = require('./replace-animations');\nvar regex = require('./regex');\nvar classRegex = regex.classRegex;\nvar keyframesRegex = regex.keyframesRegex;\n\nmodule.exports = scopify;\n\nfunction scopify(css, ignores) {\n  var makeScopedName = fileScoper(css);\n  var replacers = {\n    classes: classRegex,\n    keyframes: keyframesRegex\n  };\n\n  function scopeCss(result, key) {\n    var replacer = replacers[key];\n    function replaceFn(fullMatch, prefix, name) {\n      var scopedName = ignores[name] ? name : makeScopedName(name);\n      result[key][scopedName] = name;\n      return prefix + scopedName;\n    }\n    return {\n      css: result.css.replace(replacer, replaceFn),\n      keyframes: result.keyframes,\n      classes: result.classes\n    };\n  }\n\n  var result = Object.keys(replacers).reduce(scopeCss, {\n    css: css,\n    keyframes: {},\n    classes: {}\n  });\n\n  return replaceAnimations(result);\n}\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/scoped-name.js":"'use strict';\n\nvar encode = require('./base62-encode');\nvar hash = require('./hash-string');\n\nmodule.exports = function fileScoper(fileSrc) {\n  var suffix = encode(hash(fileSrc));\n\n  return function scopedName(name) {\n    return name + '_' + suffix;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/base62-encode.js":"'use strict';\n\n/**\n * base62 encode implementation based on base62 module:\n * https://github.com/andrew/base62.js\n */\n\nvar CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nmodule.exports = function encode(integer) {\n  if (integer === 0) {\n    return '0';\n  }\n  var str = '';\n  while (integer > 0) {\n    str = CHARS[integer % 62] + str;\n    integer = Math.floor(integer / 62);\n  }\n  return str;\n};\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/hash-string.js":"'use strict';\n\n/**\n * djb2 string hash implementation based on string-hash module:\n * https://github.com/darkskyapp/string-hash\n */\n\nmodule.exports = function hashStr(str) {\n  var hash = 5381;\n  var i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i)\n  }\n  return hash >>> 0;\n};\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/replace-animations.js":"var ignoreComments = require('./regex').ignoreComments;\n\nmodule.exports = replaceAnimations;\n\nfunction replaceAnimations(result) {\n  var animations = Object.keys(result.keyframes).reduce(function(acc, key) {\n    acc[result.keyframes[key]] = key;\n    return acc;\n  }, {});\n  var unscoped = Object.keys(animations);\n\n  if (unscoped.length) {\n    var regexStr = '((?:animation|animation-name)\\\\s*:[^};]*)('\n      + unscoped.join('|') + ')([;\\\\s])' + ignoreComments;\n    var regex = new RegExp(regexStr, 'g');\n\n    var replaced = result.css.replace(regex, function(match, preamble, name, ending) {\n      return preamble + animations[name] + ending;\n    });\n\n    return {\n      css: replaced,\n      keyframes: result.keyframes,\n      classes: result.classes\n    }\n  }\n\n  return result;\n}\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/regex.js":"'use strict';\n\nvar findClasses = /(\\.)(?!\\d)([^\\s\\.,{\\[>+~#:)]*)(?![^{]*})/.source;\nvar findKeyframes = /(@\\S*keyframes\\s*)([^{\\s]*)/.source;\nvar ignoreComments = /(?!(?:[^*/]|\\*[^/]|\\/[^*])*\\*+\\/)/.source;\n\nvar classRegex = new RegExp(findClasses + ignoreComments, 'g');\nvar keyframesRegex = new RegExp(findKeyframes + ignoreComments, 'g');\n\nmodule.exports = {\n  classRegex: classRegex,\n  keyframesRegex: keyframesRegex,\n  ignoreComments: ignoreComments,\n};\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/css-key.js":"'use strict';\n\n/**\n * CSS identifiers with whitespace are invalid\n * Hence this key will not cause a collision\n */\n\nmodule.exports = ' css ';\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/extract-exports.js":"'use strict';\n\nvar regex = require('./regex');\nvar classRegex = regex.classRegex;\nvar keyframesRegex = regex.keyframesRegex;\n\nmodule.exports = extractExports;\n\nfunction extractExports(css) {\n  return {\n    css: css,\n    keyframes: getExport(css, keyframesRegex),\n    classes: getExport(css, classRegex)\n  };\n}\n\nfunction getExport(css, regex) {\n  var prop = {};\n  var match;\n  while((match = regex.exec(css)) !== null) {\n    var name = match[2];\n    prop[name] = name;\n  }\n  return prop;\n}\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/get-css.js":"'use strict';\n\nmodule.exports = require('./lib/get-css');\n","/home/travis/build/npmtest/node-npmtest-csjs/node_modules/csjs/lib/get-css.js":"'use strict';\n\nvar cssKey = require('./css-key');\n\nmodule.exports = function getCss(csjs) {\n  return csjs[cssKey];\n};\n"}